# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `demo.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module Demo
_M_Demo = Ice.openModule('Demo')
__name__ = 'Demo'

if 'Person' not in _M_Demo.__dict__:
    _M_Demo.Person = Ice.createTempClass()
    class Person(object):
        def __init__(self, name='', age=0):
            self.name = name
            self.age = age

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.name)
            _h = 5 * _h + Ice.getHash(self.age)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_Demo.Person):
                return NotImplemented
            else:
                if self.name is None or other.name is None:
                    if self.name != other.name:
                        return (-1 if self.name is None else 1)
                else:
                    if self.name < other.name:
                        return -1
                    elif self.name > other.name:
                        return 1
                if self.age is None or other.age is None:
                    if self.age != other.age:
                        return (-1 if self.age is None else 1)
                else:
                    if self.age < other.age:
                        return -1
                    elif self.age > other.age:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_Demo._t_Person)

        __repr__ = __str__

    _M_Demo._t_Person = IcePy.defineStruct('::Demo::Person', Person, (), (
        ('name', (), IcePy._t_string),
        ('age', (), IcePy._t_int)
    ))

    _M_Demo.Person = Person
    del Person

if '_t_PersonList' not in _M_Demo.__dict__:
    _M_Demo._t_PersonList = IcePy.defineSequence('::Demo::PersonList', (), _M_Demo._t_Person)

_M_Demo._t_Example = IcePy.defineValue('::Demo::Example', Ice.Value, -1, (), False, True, None, ())

if 'ExamplePrx' not in _M_Demo.__dict__:
    _M_Demo.ExamplePrx = Ice.createTempClass()
    class ExamplePrx(Ice.ObjectPrx):

        def sayHello(self, context=None):
            return _M_Demo.Example._op_sayHello.invoke(self, ((), context))

        def sayHelloAsync(self, context=None):
            return _M_Demo.Example._op_sayHello.invokeAsync(self, ((), context))

        def begin_sayHello(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.Example._op_sayHello.begin(self, ((), _response, _ex, _sent, context))

        def end_sayHello(self, _r):
            return _M_Demo.Example._op_sayHello.end(self, _r)

        def add(self, a, b, context=None):
            return _M_Demo.Example._op_add.invoke(self, ((a, b), context))

        def addAsync(self, a, b, context=None):
            return _M_Demo.Example._op_add.invokeAsync(self, ((a, b), context))

        def begin_add(self, a, b, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.Example._op_add.begin(self, ((a, b), _response, _ex, _sent, context))

        def end_add(self, _r):
            return _M_Demo.Example._op_add.end(self, _r)

        def getPersons(self, context=None):
            return _M_Demo.Example._op_getPersons.invoke(self, ((), context))

        def getPersonsAsync(self, context=None):
            return _M_Demo.Example._op_getPersons.invokeAsync(self, ((), context))

        def begin_getPersons(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.Example._op_getPersons.begin(self, ((), _response, _ex, _sent, context))

        def end_getPersons(self, _r):
            return _M_Demo.Example._op_getPersons.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Demo.ExamplePrx.ice_checkedCast(proxy, '::Demo::Example', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Demo.ExamplePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Demo::Example'
    _M_Demo._t_ExamplePrx = IcePy.defineProxy('::Demo::Example', ExamplePrx)

    _M_Demo.ExamplePrx = ExamplePrx
    del ExamplePrx

    _M_Demo.Example = Ice.createTempClass()
    class Example(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Demo::Example', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Demo::Example'

        @staticmethod
        def ice_staticId():
            return '::Demo::Example'

        def sayHello(self, current=None):
            raise NotImplementedError("servant method 'sayHello' not implemented")

        def add(self, a, b, current=None):
            raise NotImplementedError("servant method 'add' not implemented")

        def getPersons(self, current=None):
            raise NotImplementedError("servant method 'getPersons' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Demo._t_ExampleDisp)

        __repr__ = __str__

    _M_Demo._t_ExampleDisp = IcePy.defineClass('::Demo::Example', Example, (), None, ())
    Example._ice_type = _M_Demo._t_ExampleDisp

    Example._op_sayHello = IcePy.Operation('sayHello', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_string, False, 0), ())
    Example._op_add = IcePy.Operation('add', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), ((), IcePy._t_int, False, 0), ())
    Example._op_getPersons = IcePy.Operation('getPersons', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_Demo._t_PersonList, False, 0), ())

    _M_Demo.Example = Example
    del Example

# End of module Demo
