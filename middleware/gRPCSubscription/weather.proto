syntax = "proto3";

option java_multiple_files = true;
option java_package = "sr.grpc.gen.event";
option java_outer_classname = "EventSubscriptionProto";

package eventsubscription;

// Enum defining the types of events clients can subscribe to
enum EventType {
  EVENT_TYPE_UNSPECIFIED = 0; // Default value, should not be used
  WEATHER_UPDATE = 1;

}

// Message defining the criteria for a subscription.
// This specifies *what* the client is interested in.
message SubscriptionCriteria {
  // Common field: Target identifier
  string target_identifier = 1; //  "Krak√≥w"

  // Example for NEWS_FLASH: Specify keywords (optional)
  repeated string keywords = 13;
}

// Request message sent by the client to initiate a subscription.
message SubscriptionRequest {
  // Unique identifier FOR THIS SPECIFIC SUBSCRIPTION instance, generated by client.
  // Server uses this to manage the stream and for unsubscription.
  string client_subscription_id = 1;

  // The type of event the client wants to subscribe to.
  EventType event_type = 2;

  // The specific criteria for the desired events.
  SubscriptionCriteria criteria = 3;
}

// --- Event Data Payloads ---

// Enum for weather conditions
enum WeatherCondition {
  CONDITION_UNSPECIFIED = 0;
  SUNNY = 1;
  CLOUDY = 2;
  RAINY = 3;
  SNOWY = 4;
  STORMY = 5;
}

// Message representing a single day's forecast (used within WeatherUpdate)
message DailyForecast {
  string day_description = 1;
  double max_temperature_celsius = 2;
  double min_temperature_celsius = 3;
  WeatherCondition condition = 4;
  string summary = 5;
}

// Payload for a WEATHER_UPDATE event
message WeatherUpdate {
  string city = 1;                              // String field (matches criteria.target_identifier)
  double current_temperature_celsius = 2;
  double humidity_percent = 3;
  int32 wind_speed_kph = 4;
  WeatherCondition current_condition = 5;
  string detailed_description = 6;
  repeated DailyForecast forecast = 7;
}

// Payload for a CONCERT_ALERT event
message ConcertAlert {
  string artist = 1;
  string venue = 2;
  string city = 3;
  int64 event_date_unix_seconds = 4;
  int32 tickets_available = 5;
  repeated string ticket_links = 6;
}

// Payload for a NEWS_FLASH event
message NewsFlash {
  string headline = 1;
  string source = 2;
  repeated string related_keywords = 3;
  string summary = 4;
  string link = 5;
  int64 publication_date_unix_seconds = 6;
}


// Notification message sent *from* the server *to* the client via stream.
message EventNotification {
  string notification_id = 1; // Server-generated ID for this specific notification
  string client_subscription_id = 2; // The ID the client provided
  int64 timestamp_unix_seconds = 3; // Server timestamp
  EventType event_type = 4;         // Type of the event payload

  oneof event_payload {
    WeatherUpdate weather_update = 5;
    ConcertAlert concert_alert = 6;
    NewsFlash news_flash = 7;
  }
}

// Request message to cancel an existing subscription.
message UnsubscriptionRequest {
  string client_subscription_id = 1; // ID of the subscription to cancel
}

// Response message confirming unsubscription.
message UnsubscriptionResponse {
  bool success = 1;
  string message = 2; // Optional message
}

// The gRPC service definition.
service EventSubscriptionService {
  // Subscribe to events. Server streams notifications.
  rpc Subscribe (SubscriptionRequest) returns (stream EventNotification) {}

  // Unsubscribe from events. Unary call.
  rpc Unsubscribe (UnsubscriptionRequest) returns (UnsubscriptionResponse) {}
}